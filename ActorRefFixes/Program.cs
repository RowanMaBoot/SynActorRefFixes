using Mutagen.Bethesda;
using Mutagen.Bethesda.Skyrim;
using Mutagen.Bethesda.FormKeys.SkyrimSE;
using Mutagen.Bethesda.Synthesis;

namespace ActorRefFixes
{
    public class Program
    {
        static Lazy<SettingsGeneral> _SettingsGeneral = null!;
        static SettingsGeneral SettingsGeneral => _SettingsGeneral.Value;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
                .SetAutogeneratedSettings(
                    nickname: "Settings",
                    path: "settings.json",
                    out _SettingsGeneral)
                .SetTypicalOpen(GameRelease.SkyrimSE, "SynActorRefFixes.esp")
                .Run(args);
        }

        public static void PatchCells(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var cell in state.LoadOrder.PriorityOrder.Cell().WinningContextOverrides(state.LinkCache))
            {
                var cellLocation = cell.Record.Location;

                if (cellLocation.IsNull)
                {
                    if (cell.TryGetParentContext<IWorldspace, IWorldspaceGetter>(out var worldspaceContext))
                    {
                        var worldspaceLocation = worldspaceContext.Record.Location;

                        if (!worldspaceLocation.IsNull)
                        {
                            var p = cell.GetOrAddAsOverride(state.PatchMod);
                            p.Location.SetTo(worldspaceLocation);
                        }
                    }
                }
            }
        }
        public static void PatchActorRefs(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            foreach (var actorReference in state.LoadOrder.PriorityOrder.PlacedNpc().WinningContextOverrides(state.LinkCache))
            {
                if (actorReference.Record.VirtualMachineAdapter is null)
                {
                    //var npcKey = actorReference.Record.Base.FormKey;
                    var npcRecord = actorReference.Record.Base.TryResolve(state.LinkCache);

                    if (npcRecord != null)
                    {
                        var npcRace = npcRecord.Race.TryResolve(state.LinkCache);

                        if (npcRace != null)
                        {
                            var isHumanoidShouldUpdate = npcRace.HasKeyword(Skyrim.Keyword.ActorTypeNPC) && SettingsGeneral.actorUpdateSettings.updateHumanoids;
                            var isAnimalShouldUpdate = npcRace.HasKeyword(Skyrim.Keyword.ActorTypeAnimal) && SettingsGeneral.actorUpdateSettings.updateAnimals;
                            var isCreatureShouldUpdate = npcRace.HasKeyword(Skyrim.Keyword.ActorTypeCreature) && SettingsGeneral.actorUpdateSettings.updateCreatures;
                            var isDwemerShouldUpdate = npcRace.HasKeyword(Skyrim.Keyword.ActorTypeDwarven) && SettingsGeneral.actorUpdateSettings.updateDwemer;
                            var isUndeadShouldUpdate = npcRace.HasKeyword(Skyrim.Keyword.ActorTypeUndead) && SettingsGeneral.actorUpdateSettings.updateUndead;

                            if (isHumanoidShouldUpdate || isAnimalShouldUpdate || isCreatureShouldUpdate || isDwemerShouldUpdate || isUndeadShouldUpdate)
                            {
                                var persistentLocation = actorReference.Record.PersistentLocation;
                                if (persistentLocation.IsNull)
                                {
                                    if (actorReference.TryGetParentContext<ICell, ICellGetter>(out var cContext))
                                    {
                                        var cellLocation = cContext.Record.Location;

                                        if (!cellLocation.IsNull)
                                        {
                                            var p = actorReference.GetOrAddAsOverride(state.PatchMod);
                                            p.PersistentLocation.SetTo(cellLocation);
                                        }
                                        else
                                        {
                                            if (actorReference.TryGetParentContext<ICell, ICellGetter>(out var wContext))
                                            {
                                                var wLocation = wContext.Record.Location;
                                                if (!wLocation.IsNull)
                                                {
                                                    var p = actorReference.GetOrAddAsOverride(state.PatchMod);
                                                    p.PersistentLocation.SetTo(wLocation);
                                                }

                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            
            if (SettingsGeneral.enableCellLocationUpdates)
                PatchCells(state);
            if (SettingsGeneral.enableNPCPersistentLocationUpdates)
                PatchActorRefs(state);
        }
    }
}
